{"version":3,"sources":["store/dictionaries/reducer.ts","store/app-initial-state.ts","store/index.ts","store/dictionaries/types.ts","components/ReadOnlyDictionary/ReadOnlyDictionary.tsx","components/NavBar/NavBar.tsx","screens/ViewDictionaries/ViewDictionaries.tsx","screens/ViewDictionaries/provider.ts","components/TableRow/TableRow.tsx","components/ModalDialog/ModalDialog.tsx","components/ConfirmAlert/ConfirmAlert.tsx","constants.ts","components/Dictionary/Dictionary.tsx","components/CreateDictionaryForm/CreateDictionaryForm.tsx","screens/ManageDictionaries/ManageDictionaries.tsx","screens/ManageDictionaries/provider.ts","store/dictionaries/actions.ts","screens/Home.tsx","App.tsx","index.tsx"],"names":["initialState","1000","title","description","id","rows","from","to","1001","1002","rootReducer","combineReducers","dictionaries","state","action","type","payload","filter","row","index","rowIndex","ReadOnlyDictionary","className","scope","map","key","NavBar","placeholder","aria-label","style","paddingLeft","ViewDictionaries","dictionary","connect","Object","values","TableRow","props","editModeOn","rowData","handleInputChange","bind","handleEditRow","handleSaveRow","handleDeleteRow","event","field","target","name","newValue","value","this","setState","resetError","dictionaryId","isDictionaryValid","editRow","deleteRow","hasError","autoFocus","onChange","onClick","renderInStaticMode","renderInEditMode","Component","ModalDialog","modalIsOpen","Modal","setAppElement","openModal","closeModal","prevProps","isDismissable","isOpen","onRequestClose","overlayClassName","children","ConfirmAlert","message","buttons","btn","color","label","VALIDATIONS","Dictionary","isAddingRow","confirmModalOpen","error","rowIndexes","handleAddRow","onOpenConfirmModal","onConfirmDelete","onCancelDelete","addRow","onDeleteDictionary","savingRow","errMessage","rowErrIndex","forEach","push","modalButtons","includes","renderCardHeader","renderErrorMessage","renderTable","CreateDictionaryForm","handleFormSubmit","preventDefault","isValidForm","createDictionary","onCloseModal","componentClass","onSubmit","htmlFor","ManageDictionaries","modalFormOpen","onOpenFormModal","onCloseFormModal","deleteDictionary","HomePage","App","exact","path","component","Home","ReactDOM","render","store","middlewares","logger","middlewareEnhancer","applyMiddleware","createStore","configureStore","document","getElementById"],"mappings":"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","file":"static/js/main.e12d1c6c.chunk.js","sourcesContent":["import {\r\n  CREATE_DICTIONARY,\r\n  DELETE_DICTIONARY,\r\n  DictionaryActionTypes,\r\n  ADD_ROW,\r\n  EDIT_ROW,\r\n  DELETE_ROW,\r\n  RowActionTypes\r\n} from './types';\r\nimport { DictionaryState } from '../interfaces';\r\nimport appInitialState from '../app-initial-state';\r\n\r\nconst initialState: DictionaryState = appInitialState.dictionaries;\r\n\r\nexport default (\r\n  state = initialState, action: DictionaryActionTypes | RowActionTypes): DictionaryState => {\r\n  switch (action.type) {\r\n    case CREATE_DICTIONARY:\r\n      return {\r\n        ...state,\r\n        [action.payload.id]: action.payload\r\n      };\r\n\r\n    case DELETE_DICTIONARY:\r\n      const { [action.id]: omit, ...dictionaries } = state;\r\n      return dictionaries;\r\n\r\n    case ADD_ROW:\r\n      return {\r\n        ...state,\r\n        [action.id]: {\r\n          ...state[action.id],\r\n          rows: [\r\n            ...state[action.id].rows,\r\n            { from: '', to: '' }\r\n          ]\r\n        }\r\n      };\r\n\r\n    case EDIT_ROW:\r\n      return {\r\n        ...state,\r\n        [action.id]: {\r\n          ...state[action.id],\r\n          rows: [\r\n            ...state[action.id].rows.filter((row, index) => index < action.rowIndex),\r\n            action.row,\r\n            ...state[action.id].rows.filter((row, index) => index > action.rowIndex)\r\n          ]\r\n        }\r\n      };\r\n\r\n    case DELETE_ROW:\r\n      return {\r\n        ...state,\r\n        [action.id]: {\r\n          ...state[action.id],\r\n          rows: [\r\n            ...state[action.id].rows.filter((row, index) => index !== action.rowIndex)\r\n          ]\r\n        }\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","export default {\r\n  dictionaries: {\r\n    1000: {\r\n      title: 'Color Transformation',\r\n      description: 'Lorem ipsum dolor sit amet',\r\n      id: 1000,\r\n      rows: [\r\n        { from: 'Anthracite', to: 'Dark Grey' },\r\n        { from: 'Midnight Black', to: 'Black' },\r\n        { from: 'Mystic Silver', to: 'Silver' },\r\n        { from: 'Blush Pink', to: 'Pink' }\r\n      ]\r\n    },\r\n    1001: {\r\n      title: 'Size Transformation',\r\n      description: 'Lorem ipsum dolor sit amet',\r\n      id: 1001,\r\n      rows: [\r\n        { from: 's', to: 'Small' },\r\n        { from: 'm', to: 'Medium' },\r\n        { from: 'l', to: 'Large' },\r\n        { from: 'xl', to: 'Extra Large' }\r\n      ]\r\n    },\r\n    1002: {\r\n      title: 'Country Transformation',\r\n      description: 'Lorem ipsum dolor sit amet',\r\n      id: 1002,\r\n      rows: [\r\n        { from: 'USA', to: 'United States' },\r\n        { from: 'UK', to: 'United Kingdom' },\r\n        { from: 'FRA', to: 'France' },\r\n        { from: 'GER', to: 'Germany' }\r\n      ]\r\n    }\r\n  }\r\n};\r\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\r\nimport logger from 'redux-logger';\r\n\r\nimport dictionaries from './dictionaries/reducer';\r\n\r\nconst rootReducer = combineReducers({\r\n  dictionaries\r\n});\r\n\r\nexport type AppState = ReturnType<typeof rootReducer>;\r\n\r\nexport default function configureStore() {\r\n  const middlewares = [logger];\r\n  const middlewareEnhancer = applyMiddleware(...middlewares);\r\n\r\n  const store = createStore(\r\n    rootReducer,\r\n    middlewareEnhancer\r\n  );\r\n  return store;\r\n}\r\n","import { IDictionary, IRowData } from './../interfaces';\r\n\r\n/**\r\n * Dictionary Actions\r\n */\r\nexport const CREATE_DICTIONARY = 'CREATE_DICTIONARY';\r\nexport const DELETE_DICTIONARY = 'DELETE_DICTIONARY';\r\n\r\nexport interface CreateDictionaryAction {\r\n  type: typeof CREATE_DICTIONARY;\r\n  payload: IDictionary;\r\n};\r\n\r\nexport interface DeleteDictionaryAction {\r\n  type: typeof DELETE_DICTIONARY;\r\n  id: number;\r\n};\r\n\r\n/**\r\n * Dictionary Rows Actions\r\n */\r\nexport const ADD_ROW = 'ADD_NEW_ROW';\r\nexport const EDIT_ROW = 'EDIT_ROW';\r\nexport const DELETE_ROW = 'DELETE_ROW';\r\n\r\nexport interface AddRowAction {\r\n  type: typeof ADD_ROW;\r\n  id: number;\r\n};\r\n\r\nexport interface EditRowAction {\r\n  type: typeof EDIT_ROW;\r\n  id: number;\r\n  rowIndex: number;\r\n  row: IRowData;\r\n};\r\n\r\nexport interface DeleteRowAction {\r\n  type: typeof DELETE_ROW;\r\n  id: number;\r\n  rowIndex: number;\r\n};\r\n\r\nexport type DictionaryActionTypes = CreateDictionaryAction | DeleteDictionaryAction;\r\nexport type RowActionTypes = AddRowAction | EditRowAction | DeleteRowAction;\r\n","import React from 'react';\r\nimport { IDictionary } from '../../store/interfaces';\r\nimport './style.scss';\r\n\r\nconst ReadOnlyDictionary: React.FC<IDictionary> = ({\r\n  title,\r\n  description,\r\n  rows\r\n}) => (\r\n    <div className='card card-readonly mx-4 my-5'>\r\n      <div className='card-body'>\r\n        <h5 className='card-title'>{title}</h5>\r\n        <p className='card-text text-muted'>{description}</p>\r\n        <table className='table'>\r\n          <thead>\r\n            <tr>\r\n              <th scope='col'>From</th>\r\n              <th scope='col'>To</th>\r\n              <th />\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {rows.map((row, index) => (\r\n              <tr key={index}>\r\n                <td>{row.from}\r\n                </td>\r\n                <td>{row.to}</td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\nexport default ReadOnlyDictionary;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './style.scss';\r\n\r\nconst NavBar: React.FC = () => (\r\n  <nav className='navbar navbar-expand-lg navbar-dark bg-dark mb-4 px-5'>\r\n    <Link className='navbar-brand mr-5' to='/'>App Logo</Link>\r\n    <div className='collapse navbar-collapse'>\r\n      <ul className='navbar-nav mr-auto'>\r\n        <li className='nav-item'>\r\n          <Link className='nav-link mx-2' to='/dictionaries'>View Dictionaries</Link>\r\n        </li>\r\n        <li className='nav-item'>\r\n          <Link className='nav-link mx-2' to='/admin'>Manage Dictionaries</Link>\r\n        </li>\r\n      </ul>\r\n      <form className='form-inline my-2 my-lg-0'>\r\n        <i className='material-icons'>search</i>\r\n        <input className='form-control form-control-sm mr-sm-2' type='search' placeholder='Search...' aria-label='Search' style={{ paddingLeft: '2rem' }} />\r\n        <button className='btn btn-light btn-sm my-2 my-sm-0' type='submit'>Go</button>\r\n      </form>\r\n    </div>\r\n  </nav>\r\n);\r\n\r\nexport default NavBar;","import React from 'react';\r\n\r\nimport { IDictionary } from './../../store/interfaces';\r\nimport ReadOnlyDictionary from '../../components/ReadOnlyDictionary/ReadOnlyDictionary';\r\nimport NavBar from '../../components/NavBar/NavBar';\r\n\r\ninterface Props {\r\n  dictionaries: IDictionary[];\r\n}\r\n\r\nconst ViewDictionaries: React.FC<Props> = ({\r\n  dictionaries\r\n}) => (\r\n    <>\r\n      <NavBar/>\r\n      <h1 className='display-4 text-center mb-5'>Dictionaries</h1>\r\n      <div className='d-flex justify-content-center flex-wrap'>\r\n        {dictionaries.map(dictionary => (\r\n          <ReadOnlyDictionary\r\n            title={dictionary.title}\r\n            description={dictionary.description}\r\n            key={dictionary.id}\r\n            rows={dictionary.rows}\r\n            id={dictionary.id}\r\n          />\r\n        ))}\r\n      </div>\r\n    </>\r\n  );\r\n\r\nexport default ViewDictionaries;","import { connect } from 'react-redux';\r\nimport ViewDictionaries from './ViewDictionaries';\r\n\r\nimport { AppState } from './../../store';\r\n\r\nconst state2Props = (state: AppState) => {\r\n  return {\r\n    dictionaries: Object.values(state.dictionaries)\r\n  };\r\n}\r\n\r\nexport default connect(state2Props)(ViewDictionaries);","import React, { Component, ComponentState } from 'react';\r\nimport { IRowData } from '../../store/interfaces';\r\nimport './style.scss';\r\n\r\ninterface Props {\r\n  rowData: IRowData;\r\n  editModeOn?: boolean;\r\n  dictionaryId: number;\r\n  rowIndex: number;\r\n  hasError: boolean;\r\n  editRow: (id: number, rowIndex: number, row: IRowData) => void;\r\n  deleteRow: (id: number, rowIndex: number) => void;\r\n  isDictionaryValid: (savingRow: IRowData, rowIndex: number) => boolean;\r\n  resetError: () => void;\r\n}\r\n\r\ninterface State {\r\n  editModeOn: boolean;\r\n  from: string;\r\n  to: string;\r\n}\r\n\r\nexport default class TableRow extends Component<Props, State> {\r\n  constructor(props: Props) {\r\n    super(props);\r\n    this.state = {\r\n      editModeOn: this.props.editModeOn || false,\r\n      from: this.props.rowData.from,\r\n      to: this.props.rowData.to\r\n    };\r\n    this.handleInputChange = this.handleInputChange.bind(this);\r\n    this.handleEditRow = this.handleEditRow.bind(this);\r\n    this.handleSaveRow = this.handleSaveRow.bind(this);\r\n    this.handleDeleteRow = this.handleDeleteRow.bind(this);\r\n  }\r\n\r\n  handleInputChange(event: React.ChangeEvent<HTMLInputElement>) {\r\n    const field = event.target.name;\r\n    const newValue = event.target.value;\r\n    this.setState({ [field]: newValue } as ComponentState);\r\n  }\r\n\r\n  handleEditRow() {\r\n    this.props.resetError();\r\n    this.setState({ editModeOn: true });\r\n  }\r\n\r\n  handleSaveRow() {\r\n    const { dictionaryId, rowIndex } = this.props;\r\n    const row = {\r\n      from: this.state.from,\r\n      to: this.state.to\r\n    };\r\n    const isDictionaryValid = this.props.isDictionaryValid(row, rowIndex);\r\n    if (!isDictionaryValid) {\r\n      return;\r\n    }\r\n    this.props.editRow(dictionaryId, rowIndex, row);\r\n    this.setState({ editModeOn: false });\r\n  }\r\n\r\n  handleDeleteRow() {\r\n    this.props.resetError();\r\n    this.props.deleteRow(this.props.dictionaryId, this.props.rowIndex);\r\n  }\r\n\r\n  renderInEditMode() {\r\n    const { hasError } = this.props;\r\n    if (this.state.editModeOn) {\r\n      return (\r\n        <tr>\r\n          <td className='px-0'>\r\n            <input\r\n              autoFocus\r\n              className={`form-control form-control-sm ${hasError ? 'has-error': ''}`}\r\n              type='text'\r\n              name='from'\r\n              placeholder='From'\r\n              value={this.state.from}\r\n              onChange={this.handleInputChange}\r\n            />\r\n          </td>\r\n          <td className='px-0'>\r\n            <input\r\n               className={`form-control form-control-sm ${hasError ? 'has-error': ''}`}\r\n              type='text'\r\n              name='to'\r\n              placeholder='To'\r\n              value={this.state.to}\r\n              onChange={this.handleInputChange}\r\n            />\r\n          </td>\r\n          <td>\r\n            <button className='btn py-0 px-1' onClick={this.handleSaveRow}>\r\n              <i className='material-icons'>save</i>\r\n            </button>\r\n            <button className='btn py-0 px-1' onClick={this.handleDeleteRow}>\r\n              <i className='material-icons text-danger'>clear</i>\r\n            </button>\r\n          </td>\r\n        </tr>\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  renderInStaticMode() {\r\n    if (!this.state.editModeOn) {\r\n      return (\r\n        <tr className={`${this.props.hasError ? 'bg-error' : ''}`}>\r\n          <td>\r\n          \r\n          {this.props.rowData.from}\r\n          </td>\r\n          <td>{this.props.rowData.to}\r\n          </td>\r\n          <td>\r\n            <button className='btn py-0 px-1' onClick={this.handleEditRow}>\r\n              <i className='material-icons'>edit</i>\r\n            </button>\r\n            <button className='btn py-0 px-1' onClick={this.handleDeleteRow}>\r\n              <i className='material-icons text-danger'>clear</i>\r\n            </button>\r\n          </td>\r\n        </tr>\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        {this.renderInStaticMode()}\r\n        {this.renderInEditMode()}\r\n      </>\r\n    );\r\n  }\r\n}","import React, { Component, ComponentState } from 'react';\r\nimport Modal from 'react-modal';\r\nimport './style.scss';\r\n\r\ninterface Props {\r\n  children?: React.ReactChild;\r\n  isDismissable: boolean;\r\n  modalIsOpen?: boolean;\r\n}\r\n\r\ninterface State {\r\n  modalIsOpen: boolean;\r\n}\r\n\r\nexport default class ModalDialog extends Component<Props, State> {\r\n  constructor(props: Props) {\r\n    super(props);\r\n    this.state = {\r\n      modalIsOpen: false\r\n    };\r\n    Modal.setAppElement('#root');\r\n\r\n    this.openModal = this.openModal.bind(this);\r\n    this.closeModal = this.closeModal.bind(this);\r\n  }\r\n\r\n  componentDidUpdate(prevProps: Props) {\r\n    if (this.props.modalIsOpen !== prevProps.modalIsOpen) {\r\n      this.setState({ modalIsOpen: this.props.modalIsOpen } as ComponentState);\r\n    }\r\n  }\r\n\r\n  openModal() {\r\n    this.setState({ modalIsOpen: true });\r\n  }\r\n\r\n  closeModal() {\r\n    if (this.props.isDismissable) {\r\n      this.setState({ modalIsOpen: false });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Modal\r\n        isOpen={this.state.modalIsOpen}\r\n        onRequestClose={this.closeModal}\r\n        className='modal-dialog'\r\n        overlayClassName='modal-overlay'\r\n      >\r\n        {this.props.children}\r\n      </Modal>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport './style.scss';\r\n\r\ninterface IButton {\r\n  color: string;\r\n  label: string;\r\n  onClick: () => void;\r\n}\r\n\r\ninterface Props {\r\n  title?: string;\r\n  message: string;\r\n  buttons: IButton[];\r\n}\r\n\r\nexport const ConfirmAlert: React.FC<Props> = ({\r\n  title,\r\n  message,\r\n  buttons\r\n}) => (\r\n    <div className='confirm-alert'>\r\n      {title && <h5>{title}</h5>}\r\n      <p className='h6'>{message}</p>\r\n      {buttons.map((btn, index) =>\r\n        <button\r\n          key={index}\r\n          type='button'\r\n          className={`btn btn-${btn.color} btn-sm mx-2`}\r\n          onClick={btn.onClick}>\r\n          {btn.label}\r\n        </button>\r\n      )}\r\n    </div>\r\n  );\r\n\r\nexport default ConfirmAlert;","export const VALIDATIONS = {\r\n  EMPTY: 'Row cannot have empty fields. Please fill in the data.',\r\n  CLONE: 'Dictionary cannot have duplicate rows. Please remove one of them.',\r\n  FORK: `Duplicate value on 'From' field. Please remove marked row or update field.`\r\n};","import React, { Component } from 'react';\r\nimport './style.scss';\r\n\r\nimport TableRow from '../TableRow/TableRow';\r\nimport ModalDialog from '../ModalDialog/ModalDialog';\r\nimport ConfirmAlert from '../ConfirmAlert';\r\n\r\nimport {\r\n  IDictionary,\r\n  IRowData,\r\n  IDictionaryError\r\n} from '../../store/interfaces';\r\nimport { VALIDATIONS } from '../../constants';\r\n\r\ninterface State {\r\n  isAddingRow: boolean;\r\n  confirmModalOpen: boolean;\r\n  error: IDictionaryError;\r\n}\r\n\r\ninterface Props extends IDictionary {\r\n  onDeleteDictionary: (id: number) => void;\r\n  addRow: (id: number) => void;\r\n  editRow: (id: number, rowIndex: number, row: IRowData) => void;\r\n  deleteRow: (id: number, rowIndex: number) => void;\r\n}\r\n\r\nexport default class Dictionary extends Component<Props, State> {\r\n  constructor(props: Props) {\r\n    super(props);\r\n    this.state = {\r\n      isAddingRow: false,\r\n      confirmModalOpen: false,\r\n      error: {\r\n        message: '',\r\n        rowIndexes: []\r\n      }\r\n    };\r\n    this.handleAddRow = this.handleAddRow.bind(this);\r\n    this.onOpenConfirmModal = this.onOpenConfirmModal.bind(this);\r\n    this.onConfirmDelete = this.onConfirmDelete.bind(this);\r\n    this.onCancelDelete = this.onCancelDelete.bind(this);\r\n    this.isDictionaryValid = this.isDictionaryValid.bind(this);\r\n    this.resetError = this.resetError.bind(this);\r\n  }\r\n\r\n  handleAddRow() {\r\n    this.resetError();\r\n    this.props.addRow(this.props.id);\r\n    this.setState({ isAddingRow: true });\r\n  }\r\n\r\n  onOpenConfirmModal() {\r\n    this.setState({ confirmModalOpen: true });\r\n  }\r\n\r\n  onConfirmDelete() {\r\n    this.props.onDeleteDictionary(this.props.id);\r\n    this.setState({ confirmModalOpen: false });\r\n  }\r\n\r\n  onCancelDelete() {\r\n    this.setState({ confirmModalOpen: false });\r\n  }\r\n\r\n  isDictionaryValid(savingRow: IRowData, rowIndex: number) {\r\n    let errMessage = '';\r\n    const rowErrIndex = [];\r\n    const restRows = this.props.rows.filter((row, index) => {\r\n      return index !== rowIndex;\r\n    });\r\n\r\n    restRows.forEach((row, index) => {\r\n      if (row.from === savingRow.from && row.to === savingRow.to) {\r\n        errMessage = VALIDATIONS.CLONE;\r\n        rowErrIndex.push(index);\r\n      }\r\n      if (row.from === savingRow.from && row.to !== savingRow.to) {\r\n        errMessage = VALIDATIONS.FORK;\r\n        rowErrIndex.push(index);\r\n      }\r\n    });\r\n    if (!savingRow.from || !savingRow.to) {\r\n      errMessage = VALIDATIONS.EMPTY;\r\n    }\r\n    if (errMessage) {\r\n      rowErrIndex.push(rowIndex);\r\n    }\r\n    this.setState({\r\n      error: {\r\n        message: errMessage,\r\n        rowIndexes: rowErrIndex\r\n      }\r\n    });\r\n\r\n    return !errMessage;\r\n  }\r\n\r\n  resetError() {\r\n    this.setState({\r\n      error: {\r\n        message: '',\r\n        rowIndexes: []\r\n      }\r\n    });\r\n  }\r\n\r\n  renderErrorMessage() {\r\n    if (this.state.error) {\r\n      return <p className='text-danger mt-4'>{this.state.error.message}</p>;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  renderCardHeader() {\r\n    const modalButtons = [\r\n      { color: 'danger', label: 'Yes, delete it', onClick: this.onConfirmDelete },\r\n      { color: 'primary', label: 'Cancel', onClick: this.onCancelDelete }\r\n    ];\r\n    return (\r\n      <div className='card-header'>\r\n        {this.props.title}\r\n        <button\r\n          className='btn p-0'\r\n          title='Delete Dictionary'\r\n          onClick={this.onOpenConfirmModal}\r\n        >\r\n          <i className='material-icons' >delete</i>\r\n        </button>\r\n        <ModalDialog\r\n          isDismissable={false}\r\n          modalIsOpen={this.state.confirmModalOpen}\r\n        >\r\n          <ConfirmAlert\r\n            message='Are you sure you want to delete this dictionary?'\r\n            buttons={modalButtons}\r\n          />\r\n        </ModalDialog>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  renderTable() {\r\n    return (\r\n      <table className='table'>\r\n        <thead>\r\n          <tr>\r\n            <th scope='col'>From</th>\r\n            <th scope='col'>To</th>\r\n            <th />\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {this.props.rows.map((row, index) => (\r\n            <TableRow\r\n              key={index}\r\n              rowData={row}\r\n              dictionaryId={this.props.id}\r\n              rowIndex={index}\r\n              editRow={this.props.editRow}\r\n              deleteRow={this.props.deleteRow}\r\n              editModeOn={this.state.isAddingRow}\r\n              isDictionaryValid={this.isDictionaryValid}\r\n              hasError={this.state.error.rowIndexes.includes(index)}\r\n              resetError={this.resetError}\r\n            />\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className='card dictionary-card'>\r\n        {this.renderCardHeader()}\r\n        <div className='card-body'>\r\n          <p className='text-muted text-small'>\r\n            {this.props.description}\r\n          </p>\r\n          <button\r\n            type='button'\r\n            className='btn btn-primary btn-sm'\r\n            onClick={this.handleAddRow}>\r\n            Add New Row\r\n          </button>\r\n          {this.renderErrorMessage()}\r\n          {this.renderTable()}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component, ComponentState } from 'react';\r\nimport { IDictionary } from '../../store/interfaces';\r\nimport './style.scss';\r\n\r\ninterface State {\r\n  title: string;\r\n  description: string;\r\n  error: string;\r\n  id: number;\r\n};\r\n\r\ninterface Props {\r\n  createDictionary: (payload: IDictionary) => void;\r\n  onCloseModal: () => void;\r\n}\r\n\r\nexport default class CreateDictionaryForm extends Component<Props, State> {\r\n  static componentClass = 'dictionary-form';\r\n\r\n  constructor(props: Props) {\r\n    super(props);\r\n    this.state = {\r\n      title: '',\r\n      description: '',\r\n      error: '',\r\n      id: 1100\r\n    };\r\n    this.handleInputChange = this.handleInputChange.bind(this);\r\n    this.handleFormSubmit = this.handleFormSubmit.bind(this);\r\n  }\r\n\r\n  handleInputChange(event: React.ChangeEvent<HTMLInputElement>) {\r\n    const field = event.target.name;\r\n    const newValue = event.target.value;\r\n    this.setState({ [field]: newValue } as ComponentState);\r\n  }\r\n\r\n  handleFormSubmit(event: React.FormEvent) {\r\n    event.preventDefault();\r\n    if (!this.isValidForm()) {\r\n      return;\r\n    }\r\n    let { id } = this.state;\r\n    const payload = {\r\n      title: this.state.title,\r\n      description: this.state.description,\r\n      id: id++,\r\n      rows: []\r\n    };\r\n    this.setState({ id });\r\n    this.props.createDictionary(payload);\r\n    this.props.onCloseModal();\r\n  }\r\n\r\n  isValidForm() {\r\n    let error = '';\r\n    if (!this.state.title) {\r\n      error = 'Please add a title to create a new dictionary';\r\n    } else {\r\n      error = '';\r\n    }\r\n    this.setState({ error });\r\n    return !error;\r\n  }\r\n\r\n  renderErrorMessage() {\r\n    if (this.state.error) {\r\n      return <p className='text-danger'>{this.state.error}</p>;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  render() {\r\n    const { onCloseModal } = this.props;\r\n    return (\r\n      <div className={CreateDictionaryForm.componentClass}>\r\n        <h3 className='text-center'>Create Dictionary</h3>\r\n        {this.renderErrorMessage()}\r\n        <form onSubmit={this.handleFormSubmit}>\r\n          <div className='form-group my-4'>\r\n            <label htmlFor='title'>Title</label>\r\n            <input\r\n              type='text'\r\n              className='form-control'\r\n              name='title'\r\n              id='title'\r\n              placeholder='Enter title here...'\r\n              value={this.state.title}\r\n              onChange={this.handleInputChange}\r\n            />\r\n          </div>\r\n          <div className='form-group'>\r\n            <label htmlFor='description'>Description</label>\r\n            <input\r\n              type='text'\r\n              className='form-control'\r\n              name='description'\r\n              id='description'\r\n              placeholder='Enter description here...'\r\n              value={this.state.description}\r\n              onChange={this.handleInputChange}\r\n            />\r\n          </div>\r\n          <div className='d-flex justify-content-end mt-5'>\r\n            <button type='submit' className='btn btn-success mx-1'>\r\n              Create Dictionary\r\n            </button>\r\n            <button type='button' className='btn btn-danger mx-1' onClick={onCloseModal}>\r\n              Cancel\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nimport Dictionary from '../../components/Dictionary/Dictionary';\r\nimport ModalDialog from '../../components/ModalDialog/ModalDialog';\r\nimport CreateDictionaryForm from '../../components/CreateDictionaryForm/CreateDictionaryForm';\r\nimport NavBar from '../../components/NavBar/NavBar';\r\n\r\nimport { IDictionary, IRowData } from './../../store/interfaces';\r\n\r\ninterface Props {\r\n  dictionaries: IDictionary[];\r\n  createDictionary: (payload: IDictionary) => void;\r\n  deleteDictionary: (id: number) => void;\r\n  editRow: (id: number, rowIndex: number, row: IRowData) => void;\r\n  deleteRow: (id: number, rowIndex: number) => void;\r\n  addRow: (id: number) => void;\r\n}\r\n\r\ninterface State {\r\n  modalFormOpen: boolean;\r\n}\r\n\r\nexport default class ManageDictionaries extends Component<Props, State> {\r\n  constructor(props: Props) {\r\n    super(props);\r\n    this.state = {\r\n      modalFormOpen: false\r\n    };\r\n    this.onOpenFormModal = this.onOpenFormModal.bind(this);\r\n    this.onCloseFormModal = this.onCloseFormModal.bind(this);\r\n  }\r\n\r\n  onOpenFormModal() {\r\n    this.setState({ modalFormOpen: true });\r\n  }\r\n\r\n  onCloseFormModal() {\r\n    this.setState({ modalFormOpen: false });\r\n  }\r\n\r\n  render() {\r\n    const { dictionaries, createDictionary, deleteDictionary } = this.props;\r\n    return (\r\n      <>\r\n        <NavBar/>\r\n        <h1 className='display-4 text-center mb-5'>Manage Dictionaries</h1>\r\n        <button type=\"button\" className=\"btn btn-success btn-add\" onClick={this.onOpenFormModal}>\r\n          <i className='material-icons'>add</i>\r\n          Create Dictionary\r\n        </button>\r\n        <ModalDialog\r\n          isDismissable={false}\r\n          modalIsOpen={this.state.modalFormOpen}\r\n        >\r\n          <CreateDictionaryForm\r\n            createDictionary={createDictionary}\r\n            onCloseModal={this.onCloseFormModal}\r\n          />\r\n        </ModalDialog>\r\n        <div className='d-flex justify-content-center flex-wrap'>\r\n          {dictionaries.map(dictionary => (\r\n            <Dictionary\r\n              key={dictionary.id}\r\n              title={dictionary.title}\r\n              description={dictionary.description}\r\n              id={dictionary.id}\r\n              rows={dictionary.rows}\r\n              onDeleteDictionary={deleteDictionary}\r\n              addRow={this.props.addRow}\r\n              editRow={this.props.editRow}\r\n              deleteRow={this.props.deleteRow}\r\n            />\r\n          ))}\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}","import { connect } from 'react-redux';\r\nimport ManageDictionaries from './ManageDictionaries';\r\n\r\nimport { AppState } from './../../store';\r\nimport {\r\n  createDictionary,\r\n  deleteDictionary,\r\n  addRow,\r\n  editRow,\r\n  deleteRow\r\n} from './../../store/dictionaries/actions';\r\n\r\nconst state2Props = (state: AppState) => {\r\n  return {\r\n    dictionaries: Object.values(state.dictionaries)\r\n  };\r\n}\r\n\r\nexport default connect(\r\n  state2Props,\r\n  {\r\n    createDictionary,\r\n    deleteDictionary,\r\n    addRow,\r\n    editRow,\r\n    deleteRow\r\n  }\r\n)(ManageDictionaries);","import { IDictionary, IRowData } from './../interfaces';\r\nimport {\r\n  CREATE_DICTIONARY,\r\n  DELETE_DICTIONARY,\r\n  ADD_ROW,\r\n  EDIT_ROW,\r\n  DELETE_ROW\r\n} from './types';\r\n\r\n\r\nexport const createDictionary = (payload: IDictionary) => {\r\n  return {\r\n    type: CREATE_DICTIONARY,\r\n    payload\r\n  };\r\n};\r\n\r\n\r\nexport const deleteDictionary = (id: number) => {\r\n  return {\r\n    type: DELETE_DICTIONARY,\r\n    id\r\n  };\r\n};\r\n\r\n\r\nexport const addRow = (id: number) => {\r\n  return {\r\n    type: ADD_ROW,\r\n    id\r\n  };\r\n};\r\n\r\n\r\nexport const editRow = (id: number, rowIndex: number, row: IRowData) => {\r\n  return {\r\n    type: EDIT_ROW,\r\n    id,\r\n    rowIndex,\r\n    row\r\n  };\r\n};\r\n\r\nexport const deleteRow = (id: number, rowIndex: number) => {\r\n  return {\r\n    type: DELETE_ROW,\r\n    id,\r\n    rowIndex\r\n  };\r\n};\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport NavBar from './../components/NavBar/NavBar';\r\n\r\nconst HomePage: React.FC = () => (\r\n  <>\r\n    <NavBar />\r\n    <div className='container my-5'>\r\n      <h1 className='display-3 text-center mb-5'>Welcome to this page</h1>\r\n      <p className='lead text-center'>Where do you want to go next?</p>\r\n      <div className='d-flex justify-content-center'>\r\n        <Link className=\"btn btn-primary btn-lg mx-2\" to='/dictionaries'>View Dictionaries</Link>\r\n        <Link className=\"btn btn-success btn-lg mx-2\" to='/admin'>Manage Dictionaries</Link>\r\n      </div>\r\n    </div>\r\n  </>\r\n);\r\n\r\nexport default HomePage;","import React from 'react';\nimport { HashRouter, Route } from 'react-router-dom';\n\nimport ViewDictionaries from './screens/ViewDictionaries/provider';\nimport ManageDictionaries from './screens/ManageDictionaries/provider';\nimport Home from './screens/Home';\n\nconst App: React.FC = () => {\n  return (\n    <>\n      <HashRouter>\n        <div>\n          <Route exact path='/' component={Home} />\n          <Route path='/dictionaries' component={ViewDictionaries} />\n          <Route path='/admin' component={ManageDictionaries} />\n        </div>\n      </HashRouter>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { Provider } from 'react-redux';\nimport configureStore from './store';\n\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.scss';\n\nReactDOM.render(\n  <Provider store={configureStore()}>\n    <App />\n  </Provider>\n  , document.getElementById('root')\n);\n"],"sourceRoot":""}